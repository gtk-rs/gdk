// This file was generated by gir (add4ad6) from gir-files (0bcaef9)
// DO NOT EDIT

use AxisFlags;
use DeviceToolType;
use ffi;
use glib;
use glib::Value;
use glib::object::IsA;
use glib::translate::*;
use gobject_ffi;
use std::mem::transmute;

glib_wrapper! {
    pub struct DeviceTool(Object<ffi::GdkDeviceTool>);

    match fn {
        get_type => || ffi::gdk_device_tool_get_type(),
    }
}

pub trait DeviceToolExt {
    #[cfg(feature = "v3_22")]
    fn get_hardware_id(&self) -> u64;

    #[cfg(feature = "v3_22")]
    fn get_serial(&self) -> u64;

    #[cfg(feature = "v3_22")]
    fn get_tool_type(&self) -> DeviceToolType;

    fn get_property_axes(&self) -> AxisFlags;

    fn get_property_hardware_id(&self) -> u64;

    fn get_property_serial(&self) -> u64;

    fn get_property_tool_type(&self) -> DeviceToolType;
}

impl<O: IsA<DeviceTool> + IsA<glib::object::Object>> DeviceToolExt for O {
    #[cfg(feature = "v3_22")]
    fn get_hardware_id(&self) -> u64 {
        unsafe {
            ffi::gdk_device_tool_get_hardware_id(self.to_glib_none().0)
        }
    }

    #[cfg(feature = "v3_22")]
    fn get_serial(&self) -> u64 {
        unsafe {
            ffi::gdk_device_tool_get_serial(self.to_glib_none().0)
        }
    }

    #[cfg(feature = "v3_22")]
    fn get_tool_type(&self) -> DeviceToolType {
        unsafe {
            ffi::gdk_device_tool_get_tool_type(self.to_glib_none().0)
        }
    }

    fn get_property_axes(&self) -> AxisFlags {
        let mut value = Value::from(&0u32);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "axes".to_glib_none().0, value.to_glib_none_mut().0);
            transmute(value.get::<u32>().unwrap())
        }
    }

    fn get_property_hardware_id(&self) -> u64 {
        let mut value = Value::from(&0u64);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "hardware-id".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn get_property_serial(&self) -> u64 {
        let mut value = Value::from(&0u64);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "serial".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn get_property_tool_type(&self) -> DeviceToolType {
        let mut value = Value::from(&0);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "tool-type".to_glib_none().0, value.to_glib_none_mut().0);
            transmute(value.get::<i32>().unwrap())
        }
    }
}
