// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use Device;
#[cfg(any(feature = "v3_22", feature = "dox"))]
use DevicePadFeature;
use ffi;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct DevicePad(Object<ffi::GdkDevicePad, ffi::GdkDevicePadInterface>): Device;

    match fn {
        get_type => || ffi::gdk_device_pad_get_type(),
    }
}

pub trait DevicePadExt {
    #[cfg(any(feature = "v3_22", feature = "dox"))]
    fn get_feature_group(&self, feature: DevicePadFeature, feature_idx: i32) -> i32;

    #[cfg(any(feature = "v3_22", feature = "dox"))]
    fn get_group_n_modes(&self, group_idx: i32) -> i32;

    #[cfg(any(feature = "v3_22", feature = "dox"))]
    fn get_n_features(&self, feature: DevicePadFeature) -> i32;

    #[cfg(any(feature = "v3_22", feature = "dox"))]
    fn get_n_groups(&self) -> i32;
}

impl<O: IsA<DevicePad>> DevicePadExt for O {
    #[cfg(any(feature = "v3_22", feature = "dox"))]
    fn get_feature_group(&self, feature: DevicePadFeature, feature_idx: i32) -> i32 {
        unsafe {
            ffi::gdk_device_pad_get_feature_group(self.to_glib_none().0, feature.to_glib(), feature_idx)
        }
    }

    #[cfg(any(feature = "v3_22", feature = "dox"))]
    fn get_group_n_modes(&self, group_idx: i32) -> i32 {
        unsafe {
            ffi::gdk_device_pad_get_group_n_modes(self.to_glib_none().0, group_idx)
        }
    }

    #[cfg(any(feature = "v3_22", feature = "dox"))]
    fn get_n_features(&self, feature: DevicePadFeature) -> i32 {
        unsafe {
            ffi::gdk_device_pad_get_n_features(self.to_glib_none().0, feature.to_glib())
        }
    }

    #[cfg(any(feature = "v3_22", feature = "dox"))]
    fn get_n_groups(&self) -> i32 {
        unsafe {
            ffi::gdk_device_pad_get_n_groups(self.to_glib_none().0)
        }
    }
}
