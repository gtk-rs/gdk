// This file was generated by gir (c3b4020) from gir-files (71d73f0)
// DO NOT EDIT

use ffi;
use glib_ffi;
use glib::error::ErrorDomain;
use glib::translate::*;

#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
pub enum CursorType {
    XCursor,
    Arrow,
    BasedArrowDown,
    BasedArrowUp,
    Boat,
    Bogosity,
    BottomLeftCorner,
    BottomRightCorner,
    BottomSide,
    BottomTee,
    BoxSpiral,
    CenterPtr,
    Circle,
    Clock,
    CoffeeMug,
    Cross,
    CrossReverse,
    Crosshair,
    DiamondCross,
    Dot,
    Dotbox,
    DoubleArrow,
    DraftLarge,
    DraftSmall,
    DrapedBox,
    Exchange,
    Fleur,
    Gobbler,
    Gumby,
    Hand1,
    Hand2,
    Heart,
    Icon,
    IronCross,
    LeftPtr,
    LeftSide,
    LeftTee,
    Leftbutton,
    LlAngle,
    LrAngle,
    Man,
    Middlebutton,
    Mouse,
    Pencil,
    Pirate,
    Plus,
    QuestionArrow,
    RightPtr,
    RightSide,
    RightTee,
    Rightbutton,
    RtlLogo,
    Sailboat,
    SbDownArrow,
    SbHDoubleArrow,
    SbLeftArrow,
    SbRightArrow,
    SbUpArrow,
    SbVDoubleArrow,
    Shuttle,
    Sizing,
    Spider,
    Spraycan,
    Star,
    Target,
    Tcross,
    TopLeftArrow,
    TopLeftCorner,
    TopRightCorner,
    TopSide,
    TopTee,
    Trek,
    UlAngle,
    Umbrella,
    UrAngle,
    Watch,
    Xterm,
    LastCursor,
    BlankCursor,
    CursorIsPixmap,
    #[doc(hidden)]
    __Nonexhaustive(()),
}

#[doc(hidden)]
impl ToGlib for CursorType {
    type GlibType = ffi::GdkCursorType;

    fn to_glib(&self) -> ffi::GdkCursorType {
        match *self {
            CursorType::XCursor => ffi::GDK_X_CURSOR,
            CursorType::Arrow => ffi::GDK_ARROW,
            CursorType::BasedArrowDown => ffi::GDK_BASED_ARROW_DOWN,
            CursorType::BasedArrowUp => ffi::GDK_BASED_ARROW_UP,
            CursorType::Boat => ffi::GDK_BOAT,
            CursorType::Bogosity => ffi::GDK_BOGOSITY,
            CursorType::BottomLeftCorner => ffi::GDK_BOTTOM_LEFT_CORNER,
            CursorType::BottomRightCorner => ffi::GDK_BOTTOM_RIGHT_CORNER,
            CursorType::BottomSide => ffi::GDK_BOTTOM_SIDE,
            CursorType::BottomTee => ffi::GDK_BOTTOM_TEE,
            CursorType::BoxSpiral => ffi::GDK_BOX_SPIRAL,
            CursorType::CenterPtr => ffi::GDK_CENTER_PTR,
            CursorType::Circle => ffi::GDK_CIRCLE,
            CursorType::Clock => ffi::GDK_CLOCK,
            CursorType::CoffeeMug => ffi::GDK_COFFEE_MUG,
            CursorType::Cross => ffi::GDK_CROSS,
            CursorType::CrossReverse => ffi::GDK_CROSS_REVERSE,
            CursorType::Crosshair => ffi::GDK_CROSSHAIR,
            CursorType::DiamondCross => ffi::GDK_DIAMOND_CROSS,
            CursorType::Dot => ffi::GDK_DOT,
            CursorType::Dotbox => ffi::GDK_DOTBOX,
            CursorType::DoubleArrow => ffi::GDK_DOUBLE_ARROW,
            CursorType::DraftLarge => ffi::GDK_DRAFT_LARGE,
            CursorType::DraftSmall => ffi::GDK_DRAFT_SMALL,
            CursorType::DrapedBox => ffi::GDK_DRAPED_BOX,
            CursorType::Exchange => ffi::GDK_EXCHANGE,
            CursorType::Fleur => ffi::GDK_FLEUR,
            CursorType::Gobbler => ffi::GDK_GOBBLER,
            CursorType::Gumby => ffi::GDK_GUMBY,
            CursorType::Hand1 => ffi::GDK_HAND1,
            CursorType::Hand2 => ffi::GDK_HAND2,
            CursorType::Heart => ffi::GDK_HEART,
            CursorType::Icon => ffi::GDK_ICON,
            CursorType::IronCross => ffi::GDK_IRON_CROSS,
            CursorType::LeftPtr => ffi::GDK_LEFT_PTR,
            CursorType::LeftSide => ffi::GDK_LEFT_SIDE,
            CursorType::LeftTee => ffi::GDK_LEFT_TEE,
            CursorType::Leftbutton => ffi::GDK_LEFTBUTTON,
            CursorType::LlAngle => ffi::GDK_LL_ANGLE,
            CursorType::LrAngle => ffi::GDK_LR_ANGLE,
            CursorType::Man => ffi::GDK_MAN,
            CursorType::Middlebutton => ffi::GDK_MIDDLEBUTTON,
            CursorType::Mouse => ffi::GDK_MOUSE,
            CursorType::Pencil => ffi::GDK_PENCIL,
            CursorType::Pirate => ffi::GDK_PIRATE,
            CursorType::Plus => ffi::GDK_PLUS,
            CursorType::QuestionArrow => ffi::GDK_QUESTION_ARROW,
            CursorType::RightPtr => ffi::GDK_RIGHT_PTR,
            CursorType::RightSide => ffi::GDK_RIGHT_SIDE,
            CursorType::RightTee => ffi::GDK_RIGHT_TEE,
            CursorType::Rightbutton => ffi::GDK_RIGHTBUTTON,
            CursorType::RtlLogo => ffi::GDK_RTL_LOGO,
            CursorType::Sailboat => ffi::GDK_SAILBOAT,
            CursorType::SbDownArrow => ffi::GDK_SB_DOWN_ARROW,
            CursorType::SbHDoubleArrow => ffi::GDK_SB_H_DOUBLE_ARROW,
            CursorType::SbLeftArrow => ffi::GDK_SB_LEFT_ARROW,
            CursorType::SbRightArrow => ffi::GDK_SB_RIGHT_ARROW,
            CursorType::SbUpArrow => ffi::GDK_SB_UP_ARROW,
            CursorType::SbVDoubleArrow => ffi::GDK_SB_V_DOUBLE_ARROW,
            CursorType::Shuttle => ffi::GDK_SHUTTLE,
            CursorType::Sizing => ffi::GDK_SIZING,
            CursorType::Spider => ffi::GDK_SPIDER,
            CursorType::Spraycan => ffi::GDK_SPRAYCAN,
            CursorType::Star => ffi::GDK_STAR,
            CursorType::Target => ffi::GDK_TARGET,
            CursorType::Tcross => ffi::GDK_TCROSS,
            CursorType::TopLeftArrow => ffi::GDK_TOP_LEFT_ARROW,
            CursorType::TopLeftCorner => ffi::GDK_TOP_LEFT_CORNER,
            CursorType::TopRightCorner => ffi::GDK_TOP_RIGHT_CORNER,
            CursorType::TopSide => ffi::GDK_TOP_SIDE,
            CursorType::TopTee => ffi::GDK_TOP_TEE,
            CursorType::Trek => ffi::GDK_TREK,
            CursorType::UlAngle => ffi::GDK_UL_ANGLE,
            CursorType::Umbrella => ffi::GDK_UMBRELLA,
            CursorType::UrAngle => ffi::GDK_UR_ANGLE,
            CursorType::Watch => ffi::GDK_WATCH,
            CursorType::Xterm => ffi::GDK_XTERM,
            CursorType::LastCursor => ffi::GDK_LAST_CURSOR,
            CursorType::BlankCursor => ffi::GDK_BLANK_CURSOR,
            CursorType::CursorIsPixmap => ffi::GDK_CURSOR_IS_PIXMAP,
            CursorType::__Nonexhaustive(_) => panic!(),
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GdkCursorType> for CursorType {
    fn from_glib(value: ffi::GdkCursorType) -> Self {
        skip_assert_initialized!();
        match value {
            ffi::GDK_X_CURSOR => CursorType::XCursor,
            ffi::GDK_ARROW => CursorType::Arrow,
            ffi::GDK_BASED_ARROW_DOWN => CursorType::BasedArrowDown,
            ffi::GDK_BASED_ARROW_UP => CursorType::BasedArrowUp,
            ffi::GDK_BOAT => CursorType::Boat,
            ffi::GDK_BOGOSITY => CursorType::Bogosity,
            ffi::GDK_BOTTOM_LEFT_CORNER => CursorType::BottomLeftCorner,
            ffi::GDK_BOTTOM_RIGHT_CORNER => CursorType::BottomRightCorner,
            ffi::GDK_BOTTOM_SIDE => CursorType::BottomSide,
            ffi::GDK_BOTTOM_TEE => CursorType::BottomTee,
            ffi::GDK_BOX_SPIRAL => CursorType::BoxSpiral,
            ffi::GDK_CENTER_PTR => CursorType::CenterPtr,
            ffi::GDK_CIRCLE => CursorType::Circle,
            ffi::GDK_CLOCK => CursorType::Clock,
            ffi::GDK_COFFEE_MUG => CursorType::CoffeeMug,
            ffi::GDK_CROSS => CursorType::Cross,
            ffi::GDK_CROSS_REVERSE => CursorType::CrossReverse,
            ffi::GDK_CROSSHAIR => CursorType::Crosshair,
            ffi::GDK_DIAMOND_CROSS => CursorType::DiamondCross,
            ffi::GDK_DOT => CursorType::Dot,
            ffi::GDK_DOTBOX => CursorType::Dotbox,
            ffi::GDK_DOUBLE_ARROW => CursorType::DoubleArrow,
            ffi::GDK_DRAFT_LARGE => CursorType::DraftLarge,
            ffi::GDK_DRAFT_SMALL => CursorType::DraftSmall,
            ffi::GDK_DRAPED_BOX => CursorType::DrapedBox,
            ffi::GDK_EXCHANGE => CursorType::Exchange,
            ffi::GDK_FLEUR => CursorType::Fleur,
            ffi::GDK_GOBBLER => CursorType::Gobbler,
            ffi::GDK_GUMBY => CursorType::Gumby,
            ffi::GDK_HAND1 => CursorType::Hand1,
            ffi::GDK_HAND2 => CursorType::Hand2,
            ffi::GDK_HEART => CursorType::Heart,
            ffi::GDK_ICON => CursorType::Icon,
            ffi::GDK_IRON_CROSS => CursorType::IronCross,
            ffi::GDK_LEFT_PTR => CursorType::LeftPtr,
            ffi::GDK_LEFT_SIDE => CursorType::LeftSide,
            ffi::GDK_LEFT_TEE => CursorType::LeftTee,
            ffi::GDK_LEFTBUTTON => CursorType::Leftbutton,
            ffi::GDK_LL_ANGLE => CursorType::LlAngle,
            ffi::GDK_LR_ANGLE => CursorType::LrAngle,
            ffi::GDK_MAN => CursorType::Man,
            ffi::GDK_MIDDLEBUTTON => CursorType::Middlebutton,
            ffi::GDK_MOUSE => CursorType::Mouse,
            ffi::GDK_PENCIL => CursorType::Pencil,
            ffi::GDK_PIRATE => CursorType::Pirate,
            ffi::GDK_PLUS => CursorType::Plus,
            ffi::GDK_QUESTION_ARROW => CursorType::QuestionArrow,
            ffi::GDK_RIGHT_PTR => CursorType::RightPtr,
            ffi::GDK_RIGHT_SIDE => CursorType::RightSide,
            ffi::GDK_RIGHT_TEE => CursorType::RightTee,
            ffi::GDK_RIGHTBUTTON => CursorType::Rightbutton,
            ffi::GDK_RTL_LOGO => CursorType::RtlLogo,
            ffi::GDK_SAILBOAT => CursorType::Sailboat,
            ffi::GDK_SB_DOWN_ARROW => CursorType::SbDownArrow,
            ffi::GDK_SB_H_DOUBLE_ARROW => CursorType::SbHDoubleArrow,
            ffi::GDK_SB_LEFT_ARROW => CursorType::SbLeftArrow,
            ffi::GDK_SB_RIGHT_ARROW => CursorType::SbRightArrow,
            ffi::GDK_SB_UP_ARROW => CursorType::SbUpArrow,
            ffi::GDK_SB_V_DOUBLE_ARROW => CursorType::SbVDoubleArrow,
            ffi::GDK_SHUTTLE => CursorType::Shuttle,
            ffi::GDK_SIZING => CursorType::Sizing,
            ffi::GDK_SPIDER => CursorType::Spider,
            ffi::GDK_SPRAYCAN => CursorType::Spraycan,
            ffi::GDK_STAR => CursorType::Star,
            ffi::GDK_TARGET => CursorType::Target,
            ffi::GDK_TCROSS => CursorType::Tcross,
            ffi::GDK_TOP_LEFT_ARROW => CursorType::TopLeftArrow,
            ffi::GDK_TOP_LEFT_CORNER => CursorType::TopLeftCorner,
            ffi::GDK_TOP_RIGHT_CORNER => CursorType::TopRightCorner,
            ffi::GDK_TOP_SIDE => CursorType::TopSide,
            ffi::GDK_TOP_TEE => CursorType::TopTee,
            ffi::GDK_TREK => CursorType::Trek,
            ffi::GDK_UL_ANGLE => CursorType::UlAngle,
            ffi::GDK_UMBRELLA => CursorType::Umbrella,
            ffi::GDK_UR_ANGLE => CursorType::UrAngle,
            ffi::GDK_WATCH => CursorType::Watch,
            ffi::GDK_XTERM => CursorType::Xterm,
            ffi::GDK_LAST_CURSOR => CursorType::LastCursor,
            ffi::GDK_BLANK_CURSOR => CursorType::BlankCursor,
            ffi::GDK_CURSOR_IS_PIXMAP => CursorType::CursorIsPixmap,
        }
    }
}

#[cfg(feature = "v3_16")]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
pub enum GLError {
    NotAvailable,
    UnsupportedFormat,
    UnsupportedProfile,
    #[doc(hidden)]
    __Nonexhaustive(()),
}

#[cfg(feature = "v3_16")]
#[doc(hidden)]
impl ToGlib for GLError {
    type GlibType = ffi::GdkGLError;

    fn to_glib(&self) -> ffi::GdkGLError {
        match *self {
            GLError::NotAvailable => ffi::GDK_GL_ERROR_NOT_AVAILABLE,
            GLError::UnsupportedFormat => ffi::GDK_GL_ERROR_UNSUPPORTED_FORMAT,
            GLError::UnsupportedProfile => ffi::GDK_GL_ERROR_UNSUPPORTED_PROFILE,
            GLError::__Nonexhaustive(_) => panic!(),
        }
    }
}

#[cfg(feature = "v3_16")]
#[doc(hidden)]
impl FromGlib<ffi::GdkGLError> for GLError {
    fn from_glib(value: ffi::GdkGLError) -> Self {
        skip_assert_initialized!();
        match value {
            ffi::GDK_GL_ERROR_NOT_AVAILABLE => GLError::NotAvailable,
            ffi::GDK_GL_ERROR_UNSUPPORTED_FORMAT => GLError::UnsupportedFormat,
            ffi::GDK_GL_ERROR_UNSUPPORTED_PROFILE => GLError::UnsupportedProfile,
        }
    }
}

#[cfg(feature = "v3_16")]
impl ErrorDomain for GLError {
    fn domain() -> glib_ffi::GQuark {
        skip_assert_initialized!();
        unsafe { ffi::gdk_gl_error_quark() }
    }

    fn code(self) -> i32 {
        self.to_glib() as i32
    }

    fn from(code: i32) -> Option<Self> {
        skip_assert_initialized!();
        match code {
            x if x == ffi::GDK_GL_ERROR_NOT_AVAILABLE as i32 => Some(GLError::NotAvailable),
            x if x == ffi::GDK_GL_ERROR_UNSUPPORTED_FORMAT as i32 => Some(GLError::UnsupportedFormat),
            x if x == ffi::GDK_GL_ERROR_UNSUPPORTED_PROFILE as i32 => Some(GLError::UnsupportedProfile),
            _ => Some(GLError::__Nonexhaustive(())),
        }
    }
}

#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
pub enum Gravity {
    NorthWest,
    North,
    NorthEast,
    West,
    Center,
    East,
    SouthWest,
    South,
    SouthEast,
    Static,
    #[doc(hidden)]
    __Nonexhaustive(()),
}

#[doc(hidden)]
impl ToGlib for Gravity {
    type GlibType = ffi::GdkGravity;

    fn to_glib(&self) -> ffi::GdkGravity {
        match *self {
            Gravity::NorthWest => ffi::GDK_GRAVITY_NORTH_WEST,
            Gravity::North => ffi::GDK_GRAVITY_NORTH,
            Gravity::NorthEast => ffi::GDK_GRAVITY_NORTH_EAST,
            Gravity::West => ffi::GDK_GRAVITY_WEST,
            Gravity::Center => ffi::GDK_GRAVITY_CENTER,
            Gravity::East => ffi::GDK_GRAVITY_EAST,
            Gravity::SouthWest => ffi::GDK_GRAVITY_SOUTH_WEST,
            Gravity::South => ffi::GDK_GRAVITY_SOUTH,
            Gravity::SouthEast => ffi::GDK_GRAVITY_SOUTH_EAST,
            Gravity::Static => ffi::GDK_GRAVITY_STATIC,
            Gravity::__Nonexhaustive(_) => panic!(),
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GdkGravity> for Gravity {
    fn from_glib(value: ffi::GdkGravity) -> Self {
        skip_assert_initialized!();
        match value {
            ffi::GDK_GRAVITY_NORTH_WEST => Gravity::NorthWest,
            ffi::GDK_GRAVITY_NORTH => Gravity::North,
            ffi::GDK_GRAVITY_NORTH_EAST => Gravity::NorthEast,
            ffi::GDK_GRAVITY_WEST => Gravity::West,
            ffi::GDK_GRAVITY_CENTER => Gravity::Center,
            ffi::GDK_GRAVITY_EAST => Gravity::East,
            ffi::GDK_GRAVITY_SOUTH_WEST => Gravity::SouthWest,
            ffi::GDK_GRAVITY_SOUTH => Gravity::South,
            ffi::GDK_GRAVITY_SOUTH_EAST => Gravity::SouthEast,
            ffi::GDK_GRAVITY_STATIC => Gravity::Static,
        }
    }
}

#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
pub enum ModifierIntent {
    PrimaryAccelerator,
    ContextMenu,
    ExtendSelection,
    ModifySelection,
    NoTextInput,
    ShiftGroup,
    DefaultModMask,
    #[doc(hidden)]
    __Nonexhaustive(()),
}

#[doc(hidden)]
impl ToGlib for ModifierIntent {
    type GlibType = ffi::GdkModifierIntent;

    fn to_glib(&self) -> ffi::GdkModifierIntent {
        match *self {
            ModifierIntent::PrimaryAccelerator => ffi::GDK_MODIFIER_INTENT_PRIMARY_ACCELERATOR,
            ModifierIntent::ContextMenu => ffi::GDK_MODIFIER_INTENT_CONTEXT_MENU,
            ModifierIntent::ExtendSelection => ffi::GDK_MODIFIER_INTENT_EXTEND_SELECTION,
            ModifierIntent::ModifySelection => ffi::GDK_MODIFIER_INTENT_MODIFY_SELECTION,
            ModifierIntent::NoTextInput => ffi::GDK_MODIFIER_INTENT_NO_TEXT_INPUT,
            ModifierIntent::ShiftGroup => ffi::GDK_MODIFIER_INTENT_SHIFT_GROUP,
            ModifierIntent::DefaultModMask => ffi::GDK_MODIFIER_INTENT_DEFAULT_MOD_MASK,
            ModifierIntent::__Nonexhaustive(_) => panic!(),
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GdkModifierIntent> for ModifierIntent {
    fn from_glib(value: ffi::GdkModifierIntent) -> Self {
        skip_assert_initialized!();
        match value {
            ffi::GDK_MODIFIER_INTENT_PRIMARY_ACCELERATOR => ModifierIntent::PrimaryAccelerator,
            ffi::GDK_MODIFIER_INTENT_CONTEXT_MENU => ModifierIntent::ContextMenu,
            ffi::GDK_MODIFIER_INTENT_EXTEND_SELECTION => ModifierIntent::ExtendSelection,
            ffi::GDK_MODIFIER_INTENT_MODIFY_SELECTION => ModifierIntent::ModifySelection,
            ffi::GDK_MODIFIER_INTENT_NO_TEXT_INPUT => ModifierIntent::NoTextInput,
            ffi::GDK_MODIFIER_INTENT_SHIFT_GROUP => ModifierIntent::ShiftGroup,
            ffi::GDK_MODIFIER_INTENT_DEFAULT_MOD_MASK => ModifierIntent::DefaultModMask,
        }
    }
}

#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
pub enum WindowEdge {
    NorthWest,
    North,
    NorthEast,
    West,
    East,
    SouthWest,
    South,
    SouthEast,
    #[doc(hidden)]
    __Nonexhaustive(()),
}

#[doc(hidden)]
impl ToGlib for WindowEdge {
    type GlibType = ffi::GdkWindowEdge;

    fn to_glib(&self) -> ffi::GdkWindowEdge {
        match *self {
            WindowEdge::NorthWest => ffi::GDK_WINDOW_EDGE_NORTH_WEST,
            WindowEdge::North => ffi::GDK_WINDOW_EDGE_NORTH,
            WindowEdge::NorthEast => ffi::GDK_WINDOW_EDGE_NORTH_EAST,
            WindowEdge::West => ffi::GDK_WINDOW_EDGE_WEST,
            WindowEdge::East => ffi::GDK_WINDOW_EDGE_EAST,
            WindowEdge::SouthWest => ffi::GDK_WINDOW_EDGE_SOUTH_WEST,
            WindowEdge::South => ffi::GDK_WINDOW_EDGE_SOUTH,
            WindowEdge::SouthEast => ffi::GDK_WINDOW_EDGE_SOUTH_EAST,
            WindowEdge::__Nonexhaustive(_) => panic!(),
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GdkWindowEdge> for WindowEdge {
    fn from_glib(value: ffi::GdkWindowEdge) -> Self {
        skip_assert_initialized!();
        match value {
            ffi::GDK_WINDOW_EDGE_NORTH_WEST => WindowEdge::NorthWest,
            ffi::GDK_WINDOW_EDGE_NORTH => WindowEdge::North,
            ffi::GDK_WINDOW_EDGE_NORTH_EAST => WindowEdge::NorthEast,
            ffi::GDK_WINDOW_EDGE_WEST => WindowEdge::West,
            ffi::GDK_WINDOW_EDGE_EAST => WindowEdge::East,
            ffi::GDK_WINDOW_EDGE_SOUTH_WEST => WindowEdge::SouthWest,
            ffi::GDK_WINDOW_EDGE_SOUTH => WindowEdge::South,
            ffi::GDK_WINDOW_EDGE_SOUTH_EAST => WindowEdge::SouthEast,
        }
    }
}

#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
pub enum WindowTypeHint {
    Normal,
    Dialog,
    Menu,
    Toolbar,
    Splashscreen,
    Utility,
    Dock,
    Desktop,
    DropdownMenu,
    PopupMenu,
    Tooltip,
    Notification,
    Combo,
    Dnd,
    #[doc(hidden)]
    __Nonexhaustive(()),
}

#[doc(hidden)]
impl ToGlib for WindowTypeHint {
    type GlibType = ffi::GdkWindowTypeHint;

    fn to_glib(&self) -> ffi::GdkWindowTypeHint {
        match *self {
            WindowTypeHint::Normal => ffi::GDK_WINDOW_TYPE_HINT_NORMAL,
            WindowTypeHint::Dialog => ffi::GDK_WINDOW_TYPE_HINT_DIALOG,
            WindowTypeHint::Menu => ffi::GDK_WINDOW_TYPE_HINT_MENU,
            WindowTypeHint::Toolbar => ffi::GDK_WINDOW_TYPE_HINT_TOOLBAR,
            WindowTypeHint::Splashscreen => ffi::GDK_WINDOW_TYPE_HINT_SPLASHSCREEN,
            WindowTypeHint::Utility => ffi::GDK_WINDOW_TYPE_HINT_UTILITY,
            WindowTypeHint::Dock => ffi::GDK_WINDOW_TYPE_HINT_DOCK,
            WindowTypeHint::Desktop => ffi::GDK_WINDOW_TYPE_HINT_DESKTOP,
            WindowTypeHint::DropdownMenu => ffi::GDK_WINDOW_TYPE_HINT_DROPDOWN_MENU,
            WindowTypeHint::PopupMenu => ffi::GDK_WINDOW_TYPE_HINT_POPUP_MENU,
            WindowTypeHint::Tooltip => ffi::GDK_WINDOW_TYPE_HINT_TOOLTIP,
            WindowTypeHint::Notification => ffi::GDK_WINDOW_TYPE_HINT_NOTIFICATION,
            WindowTypeHint::Combo => ffi::GDK_WINDOW_TYPE_HINT_COMBO,
            WindowTypeHint::Dnd => ffi::GDK_WINDOW_TYPE_HINT_DND,
            WindowTypeHint::__Nonexhaustive(_) => panic!(),
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GdkWindowTypeHint> for WindowTypeHint {
    fn from_glib(value: ffi::GdkWindowTypeHint) -> Self {
        skip_assert_initialized!();
        match value {
            ffi::GDK_WINDOW_TYPE_HINT_NORMAL => WindowTypeHint::Normal,
            ffi::GDK_WINDOW_TYPE_HINT_DIALOG => WindowTypeHint::Dialog,
            ffi::GDK_WINDOW_TYPE_HINT_MENU => WindowTypeHint::Menu,
            ffi::GDK_WINDOW_TYPE_HINT_TOOLBAR => WindowTypeHint::Toolbar,
            ffi::GDK_WINDOW_TYPE_HINT_SPLASHSCREEN => WindowTypeHint::Splashscreen,
            ffi::GDK_WINDOW_TYPE_HINT_UTILITY => WindowTypeHint::Utility,
            ffi::GDK_WINDOW_TYPE_HINT_DOCK => WindowTypeHint::Dock,
            ffi::GDK_WINDOW_TYPE_HINT_DESKTOP => WindowTypeHint::Desktop,
            ffi::GDK_WINDOW_TYPE_HINT_DROPDOWN_MENU => WindowTypeHint::DropdownMenu,
            ffi::GDK_WINDOW_TYPE_HINT_POPUP_MENU => WindowTypeHint::PopupMenu,
            ffi::GDK_WINDOW_TYPE_HINT_TOOLTIP => WindowTypeHint::Tooltip,
            ffi::GDK_WINDOW_TYPE_HINT_NOTIFICATION => WindowTypeHint::Notification,
            ffi::GDK_WINDOW_TYPE_HINT_COMBO => WindowTypeHint::Combo,
            ffi::GDK_WINDOW_TYPE_HINT_DND => WindowTypeHint::Dnd,
        }
    }
}

